// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflow_test

import (
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"testing"
)

func TestAccDialogflowConversationProfile_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowConversationProfile_dialogflowAgentFull1(context),
			},
			{
				ResourceName:            "google_dialogflow_convesation_profile.profile",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
			{
				Config: testAccDialogflowConversationProfile_dialogflowAgentFull2(context),
			},
			{
				ResourceName:            "google_dialogflow_convesation_profile.profile",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
		},
	})
}

func testAccDialogflowConversationProfile_dialogflowAgentFull1(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_project" "agent_project" {
      name            = "tf-test-dialogflow-%{random_suffix}"
      project_id      = "tf-test-dialogflow-%{random_suffix}"
      org_id          = "%{org_id}"
      billing_account = "%{billing_account}"
    }
    
    resource "google_project_service" "agent_project" {
      project                    = google_project.agent_project.project_id
      service                    = "dialogflow.googleapis.com"
      disable_dependent_services = false
    }
    
    resource "google_service_account" "dialogflow_service_account" {
      account_id = "tf-test-dialogflow-%{random_suffix}"
    }
    
    resource "google_project_iam_member" "agent_create" {
      project = google_project_service.agent_project.project
      role    = "roles/dialogflow.admin"
      member  = "serviceAccount:${google_service_account.dialogflow_service_account.email}"
    }
    
    resource "google_dialogflow_agent" "agent" {
      project               = google_project.agent_project.project_id
      display_name          = "tf-test-agent-%{random_suffix}"
      default_language_code = "en-us"
      time_zone             = "America/New_York"
      depends_on            = [google_project_iam_member.agent_create]
    }
    
    resource "google_pubsub_topic" "topic" {
      name = "tf-test-topic-%{random_suffix}"
    }
    
    resource "google_dialogflow_conversation_profile" "profile" {
      depends_on    = [google_dialogflow_agent.agent]
      project       = google_project.agent_project.project_id
      display_name  = "tf-test-conversation-profile-%{random_suffix}"
      language_code = "en-US"
      automated_agent_config {
        agent       = "projects/${google_dialogflow_agent.agent.id}/agent/environments/draft"
        session_ttl = 30
      }
      location = "global"
      human_agent_assistant_config {
        end_user_suggestion_config {
          disable_high_latency_features_sync_delivery = true
          feature_configs {
            conversation_model_config {
              #TODO MANUALLY CREATE SOME MODEL VERSION?
              baseline_model_version = "projects/${google_project.agent_project.project_id}/conversationModels/mymodel"
              model                  = "1.0"
            }
            conversation_process_config {
              recent_sentences_count = 1
            }
            disable_agent_query_logging            = true
            enable_conversation_augmented_query    = true
            enable_event_based_suggestion          = true
            enable_query_suggestion_when_no_answer = true
            enable_query_suggetio_only             = true
            query_config {
              confidence_threshold = "1.0"
              context_filter_settings {
                drop_handoff_messages       = true
                drop_ivr_messages           = true
                drop_virtual_agent_messages = true
              }
              dialogflow_query_source {
                agent = "projects/${google_dialogflow_agent.agent.id}/agent/environments/draft"
                human_agent_side_config {
                  agent = "projects/${google_dialogflow_agent.agent.id}/agent/environments/draft"
                }
              }
              max_results = 1
              sections {
                section_types = ["SECTION_TYPE_UNSPECIFIED"]
              }
            }
            suggestion_feature {
              type = "TYPE_UNSPECIFIED"
            }
            suggestion_trigger_settings {
              no_small_talk = true
              only_end_user = true
            }
          }
          generators                  = []
          group_suggestions_responses = true
        }
        human_agent_suggestion_config {
            disable_high_latency_features_sync_delivery = true
            feature_configs {
              conversation_model_config {
                baseline_model_version = 1.0
                model                  = "projects/${google_project.agent_project.project_id}/conversationModels/mymodel"
              }
              conversation_process_config {
                recent_sentences_count = 1
              }
              disable_agent_query_logging            = true
              enable_conversation_augmented_query    = true
              enable_event_based_suggestion          = true
              enable_query_suggestion_when_no_answer = true
              enable_query_suggetio_only             = true
              query_config {
                confidence_threshold = 0.1
                context_filter_settings {
                  drop_handoff_messages       = true
                  drop_ivr_messages           = true
                  drop_virtual_agent_messages = true
                }
                dialogflow_query_source {
                  agent = "projects/${google_dialogflow_agent.agent.id}/agent/environments/draft"
                  human_agent_side_config {
                    agent = "projects/${google_dialogflow_agent.agent.id}/agent/environments/draft"
                  }
                }
                max_results = 1
                sections {
                  section_types = ["SECTION_TYPE_UNSPECIFIED"]
                }
              }
              suggestion_feature {
                type = "TYPE_UNSPECIFIED"
              }
              suggestion_trigger_settings {
                no_small_talk = true
                only_end_user = true
              }
            }
            generators                  = []
            group_suggestions_responses = true
          }
      }
      notification_config {
        message_format = "JSON"
        topic          = google_pubsub_topic.topic.id
      }
      human_agent_handoff_config {
        live_person_config {
          account_number = "00"
        }
        salesforce_live_agent_config {
          button_id       = "button"
          deployment_id   = "id"
          endpoint_domain = "domain"
          organization_id = "%{org_id}"
        }
      }
      logging_config {
        enable_stackdriver_logging = true
      }
      new_message_event_notification_config {
        message_format = "JSON"
        topic          = google_pubsub_topic.topic.id
      }
      security_settings = google_pubsub_topic.topic.id
      stt_config {
        audo_encoding                 = "AUDIO_ENCODING_UNSPECIFIED"
        enable_word_info              = true
        language_code                 = "en-US"
        model                         = "phone_call"
        sample_rate_hertz             = 1000
        speech_model_variant          = "SPEECH_MODEL_VARIANT_UNSPECIFIED"
        use_timeout_based_endpointing = true
      }
      time_zone = "America/New_York"
      tts_config {
        effects_profile_id = ["id"]
        pitch              = 1
        speaking_rate      = 1
        voice {
          name        = "john"
          ssml_gender = "SSML_VOICE_GENDER_UNSPECIFIED"
        }
        volume_gain_db = 5
      }
    
    }
	`, context)
}
func testAccDialogflowConversationProfile_dialogflowAgentFull2(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_project" "agent_project" {
		name = "tf-test-dialogflow-%{random_suffix}"
		project_id = "tf-test-dialogflow-%{random_suffix}"
		org_id     = "%{org_id}"
		billing_account = "%{billing_account}"
	}

	resource "google_project_service" "agent_project" {
		project = google_project.agent_project.project_id
		service = "dialogflow.googleapis.com"
		disable_dependent_services = false
	}

	resource "google_service_account" "dialogflow_service_account" {
		account_id = "tf-test-dialogflow-%{random_suffix}"
	}

	resource "google_project_iam_member" "agent_create" {
		project = google_project_service.agent_project.project
		role    = "roles/dialogflow.admin"
		member  = "serviceAccount:${google_service_account.dialogflow_service_account.email}"
	}

	resource "google_dialogflow_agent" "agent" {
		project = google_project.agent_project.project_id
		display_name = "tf-test-agent-%{random_suffix}"
		default_language_code = "en-us"
		time_zone = "America/New_York"
		depends_on = [google_project_iam_member.agent_create]
	}
	
	resource "google_dialogflow_conversation_profile" "profile" {
		depends_on    = [google_dialogflow_agent.agent]
		project       = google_project.agent_project.project_id
		display_name  = "tf-test-conversation-profile-%{random_suffix}"
		language_code = "en-US"
        automated_agent_config {
            agent = "projects/${google_dialogflow_agent.agent.id}/agent/environments/draft"
        }
		location = "global"
        
        human_agent_assistant_config {
            message_analysis_config {
                enable_entity_extraction  = true
                enable_sentiment_analysis = true
            }
        }
	}
	`, context)
}
